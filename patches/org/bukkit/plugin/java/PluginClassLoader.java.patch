--- ../src-base/minecraft/org/bukkit/plugin/java/PluginClassLoader.java
+++ ../src-work/minecraft/org/bukkit/plugin/java/PluginClassLoader.java
@@ -1,31 +1,62 @@
 package org.bukkit.plugin.java;
 
 import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.JarURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.security.CodeSigner;
+import java.security.CodeSource;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.jar.Attributes;
+import java.util.jar.JarFile;
+import java.util.jar.Manifest;
 
+import cpw.mods.fml.relauncher.ReflectionHelper;
+import io.netty.util.internal.ConcurrentSet;
+import net.minecraft.launchwrapper.LaunchClassLoader;
+import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
 
+import catserver.server.CatServer;
+import catserver.server.remapper.*;
+
+import net.md_5.specialsource.JarMapping;
+import net.md_5.specialsource.provider.ClassLoaderProvider;
+import net.md_5.specialsource.provider.JointProvider;
+import net.md_5.specialsource.repo.RuntimeRepo;
+
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
-final class PluginClassLoader extends URLClassLoader {
+public /* CatServer - protected -> public */ final class PluginClassLoader extends URLClassLoader {
+    public JavaPlugin getPlugin() {
+        return plugin;
+    }
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
+    private final JarFile jar;
+    private final Manifest manifest;
+    private final URL url;
     final JavaPlugin plugin;
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
 
-    PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws InvalidPluginException, MalformedURLException {
+    private LaunchClassLoader launchClassLoader;
+    private CatServerRemapper remapper;
+    private JarMapping jarMapping;
+    private ConcurrentSet<Package> fixedPackages = new ConcurrentSet<Package>();
+
+    PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws IOException, InvalidPluginException, MalformedURLException {
         super(new URL[] {file.toURI().toURL()}, parent);
         Validate.notNull(loader, "Loader cannot be null");
 
@@ -33,7 +64,18 @@
         this.description = description;
         this.dataFolder = dataFolder;
         this.file = file;
+        this.jar = new JarFile(file);
+        this.manifest = jar.getManifest();
+        this.url = file.toURI().toURL();
 
+        this.launchClassLoader = parent instanceof LaunchClassLoader ? (LaunchClassLoader)parent : (LaunchClassLoader) MinecraftServer.getServer().getClass().getClassLoader();
+        this.jarMapping = MappingLoader.loadMapping();
+        JointProvider provider = new JointProvider();
+        provider.add(new ClassInheritanceProvider());
+        provider.add(new ClassLoaderProvider(this));
+        this.jarMapping.setFallbackInheritanceProvider(provider);
+        this.remapper = new CatServerRemapper(jarMapping);
+
         try {
             Class<?> jarClass;
             try {
@@ -63,30 +105,59 @@
     }
 
     Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFoundException {
-        if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
+        if (RemapRules.isNMSPackage(name)) {
+            String remappedClass = jarMapping.classes.getOrDefault(name.replace(".", "/"), name);
+            return launchClassLoader.findClass(remappedClass);
+        }
+
+        if (name.startsWith("org.bukkit.")) {
             throw new ClassNotFoundException(name);
         }
+
         Class<?> result = classes.get(name);
+        synchronized (name.intern()) {
+            if (result == null) {
+                if (checkGlobal) {
+                    result = loader.getClassByName(name);
+                }
 
-        if (result == null) {
-            if (checkGlobal) {
-                result = loader.getClassByName(name);
-            }
+                if (result == null) {
+                    result = remappedFindClass(name);
 
-            if (result == null) {
-                result = super.findClass(name);
+                    if (result != null) {
+                        loader.setClass(name, result);
+                    }
+                }
 
-                if (result != null) {
-                    loader.setClass(name, result);
+                if (result == null) {
+                    if (checkGlobal) {
+                        try {
+                            result = launchClassLoader.getClass().getClassLoader().loadClass(name);
+                        } catch (Throwable throwable) {
+                            throw new ClassNotFoundException(name, throwable);
+                        }
+                    }
                 }
-            }
 
-            classes.put(name, result);
-        }
+                if (result == null) {
+                    throw new ClassNotFoundException(name);
+                }
 
+                classes.put(name, result);
+            }
+        }
         return result;
     }
 
+    @Override
+    public void close() throws IOException {
+        try {
+            super.close();
+        } finally {
+            jar.close();
+        }
+    }
+
     Set<String> getClasses() {
         return classes.keySet();
     }
@@ -103,4 +174,90 @@
 
         javaPlugin.init(loader, loader.server, description, dataFolder, file, this);
     }
+
+    private Class<?> remappedFindClass(String name) throws ClassNotFoundException {
+        Class<?> result = null;
+
+        try {
+            // Load the resource to the name
+            String path = name.replace('.', '/').concat(".class");
+            URL url = this.findResource(path);
+            if (url != null) {
+                InputStream stream = url.openStream();
+                if (stream != null) {
+                    JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection(); // parses only
+                    URL jarURL = jarURLConnection.getJarFileURL();
+
+                    // Remap the classes
+                    byte[] bytecode = remapper.remapClassFile(stream, RuntimeRepo.getInstance());
+                    bytecode = ReflectionTransformer.transform(bytecode);
+
+                    // Fix the package
+                    int dot = name.lastIndexOf('.');
+                    if (dot != -1) {
+                        String pkgName = name.substring(0, dot);
+                        Package pkg = getPackage(pkgName);
+                        if (pkg == null) {
+                            try {
+                                if (manifest != null) {
+                                    pkg = definePackage(pkgName, manifest, url);
+                                } else {
+                                    pkg = definePackage(pkgName, null, null, null, null, null, null, null);
+                                }
+                            } catch (Exception e) {
+                                // do nothing
+                            }
+                        }
+                        if (pkg != null && manifest != null) {
+                            fixPackage(pkg);
+                        }
+                    }
+
+                    // Define the classes
+                    CodeSource codeSource = new CodeSource(jarURL, new CodeSigner[0]);
+                    result = this.defineClass(name, bytecode, 0, bytecode.length, codeSource);
+                    if (result != null) {
+                        // Resolve it - sets the class loader of the class
+                        this.resolveClass(result);
+                    }
+                }
+            }
+        } catch (Throwable t) {
+            throw new ClassNotFoundException("Failed to remap class "+name, t);
+        }
+
+        return result;
+    }
+
+    // CatServer - remap package
+    protected Package getPackage(String name) {
+        if ("org.bukkit.craftbukkit".equals(name))
+            name = "org.bukkit.craftbukkit." + CatServer.getNativeVersion();
+        return super.getPackage(name);
+    }
+
+    private void fixPackage(Package pkg) {
+        if (!fixedPackages.contains(pkg)) {
+            Attributes attr = manifest.getMainAttributes();
+            if (attr != null) {
+                try {
+                    try {
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.SPECIFICATION_TITLE), "specTitle");
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.SPECIFICATION_VERSION), "specVersion");
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.SPECIFICATION_VENDOR), "specVendor");
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.IMPLEMENTATION_TITLE), "implTitle");
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.IMPLEMENTATION_VERSION), "implVersion");
+                        ReflectionHelper.setPrivateValue(Package.class, pkg, attr.getValue(Attributes.Name.IMPLEMENTATION_VENDOR), "implVendor");
+                    } catch (Exception ignored) {}
+                } finally {
+                    fixedPackages.add(pkg);
+                }
+            }
+        }
+    }
+
+    // CatServer
+    public PluginDescriptionFile getDescription() {
+        return description;
+    }
 }
